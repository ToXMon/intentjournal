/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DutchAuctionEscrow {
  export type IntentOrderStruct = {
    maker: AddressLike;
    sourceToken: AddressLike;
    destinationToken: AddressLike;
    sourceAmount: BigNumberish;
    startPrice: BigNumberish;
    endPrice: BigNumberish;
    startTime: BigNumberish;
    duration: BigNumberish;
    decayFactor: BigNumberish;
    intentHash: BytesLike;
    executed: boolean;
    refunded: boolean;
    sourceChainId: BigNumberish;
    destChainId: BigNumberish;
  };

  export type IntentOrderStructOutput = [
    maker: string,
    sourceToken: string,
    destinationToken: string,
    sourceAmount: bigint,
    startPrice: bigint,
    endPrice: bigint,
    startTime: bigint,
    duration: bigint,
    decayFactor: bigint,
    intentHash: string,
    executed: boolean,
    refunded: boolean,
    sourceChainId: bigint,
    destChainId: bigint
  ] & {
    maker: string;
    sourceToken: string;
    destinationToken: string;
    sourceAmount: bigint;
    startPrice: bigint;
    endPrice: bigint;
    startTime: bigint;
    duration: bigint;
    decayFactor: bigint;
    intentHash: string;
    executed: boolean;
    refunded: boolean;
    sourceChainId: bigint;
    destChainId: bigint;
  };

  export type ResolverFillStruct = {
    resolver: AddressLike;
    fillAmount: BigNumberish;
    fillPrice: BigNumberish;
    timestamp: BigNumberish;
    proofHash: BytesLike;
  };

  export type ResolverFillStructOutput = [
    resolver: string,
    fillAmount: bigint,
    fillPrice: bigint,
    timestamp: bigint,
    proofHash: string
  ] & {
    resolver: string;
    fillAmount: bigint;
    fillPrice: bigint;
    timestamp: bigint;
    proofHash: string;
  };
}

export interface DutchAuctionEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS"
      | "DEFAULT_DECAY_FACTOR"
      | "MAX_DURATION"
      | "MIN_DURATION"
      | "addResolver"
      | "authorizedResolvers"
      | "createIntentOrder"
      | "fillOrder"
      | "fills"
      | "getCurrentPrice"
      | "getOrder"
      | "getOrderFills"
      | "getUserOrders"
      | "hasOnChainEvidence"
      | "orders"
      | "owner"
      | "pause"
      | "paused"
      | "refundOrder"
      | "removeResolver"
      | "renounceOwnership"
      | "transferOwnership"
      | "unpause"
      | "userOrders"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "IntentCreated"
      | "OrderFilled"
      | "OrderRefunded"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_DECAY_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addResolver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedResolvers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createIntentOrder",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fills",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getOrder", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getOrderFills",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOrders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOnChainEvidence",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "orders", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundOrder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeResolver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userOrders",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_DECAY_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedResolvers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIntentOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fills", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderFills",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasOnChainEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userOrders", data: BytesLike): Result;
}

export namespace IntentCreatedEvent {
  export type InputTuple = [
    orderId: BytesLike,
    maker: AddressLike,
    sourceToken: AddressLike,
    destinationToken: AddressLike,
    sourceAmount: BigNumberish,
    startPrice: BigNumberish,
    endPrice: BigNumberish,
    duration: BigNumberish,
    intentHash: BytesLike
  ];
  export type OutputTuple = [
    orderId: string,
    maker: string,
    sourceToken: string,
    destinationToken: string,
    sourceAmount: bigint,
    startPrice: bigint,
    endPrice: bigint,
    duration: bigint,
    intentHash: string
  ];
  export interface OutputObject {
    orderId: string;
    maker: string;
    sourceToken: string;
    destinationToken: string;
    sourceAmount: bigint;
    startPrice: bigint;
    endPrice: bigint;
    duration: bigint;
    intentHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderFilledEvent {
  export type InputTuple = [
    orderId: BytesLike,
    resolver: AddressLike,
    fillAmount: BigNumberish,
    fillPrice: BigNumberish,
    proofHash: BytesLike
  ];
  export type OutputTuple = [
    orderId: string,
    resolver: string,
    fillAmount: bigint,
    fillPrice: bigint,
    proofHash: string
  ];
  export interface OutputObject {
    orderId: string;
    resolver: string;
    fillAmount: bigint;
    fillPrice: bigint;
    proofHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderRefundedEvent {
  export type InputTuple = [
    orderId: BytesLike,
    maker: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [orderId: string, maker: string, amount: bigint];
  export interface OutputObject {
    orderId: string;
    maker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DutchAuctionEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): DutchAuctionEscrow;
  waitForDeployment(): Promise<this>;

  interface: DutchAuctionEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_DECAY_FACTOR: TypedContractMethod<[], [bigint], "view">;

  MAX_DURATION: TypedContractMethod<[], [bigint], "view">;

  MIN_DURATION: TypedContractMethod<[], [bigint], "view">;

  addResolver: TypedContractMethod<
    [resolver: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedResolvers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  createIntentOrder: TypedContractMethod<
    [
      sourceToken: AddressLike,
      destinationToken: AddressLike,
      sourceAmount: BigNumberish,
      startPrice: BigNumberish,
      endPrice: BigNumberish,
      duration: BigNumberish,
      intentHash: BytesLike,
      destChainId: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  fillOrder: TypedContractMethod<
    [orderId: BytesLike, fillAmount: BigNumberish, proofHash: BytesLike],
    [void],
    "nonpayable"
  >;

  fills: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, string] & {
        resolver: string;
        fillAmount: bigint;
        fillPrice: bigint;
        timestamp: bigint;
        proofHash: string;
      }
    ],
    "view"
  >;

  getCurrentPrice: TypedContractMethod<[orderId: BytesLike], [bigint], "view">;

  getOrder: TypedContractMethod<
    [orderId: BytesLike],
    [DutchAuctionEscrow.IntentOrderStructOutput],
    "view"
  >;

  getOrderFills: TypedContractMethod<
    [orderId: BytesLike],
    [DutchAuctionEscrow.ResolverFillStructOutput[]],
    "view"
  >;

  getUserOrders: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  hasOnChainEvidence: TypedContractMethod<
    [orderId: BytesLike],
    [boolean],
    "view"
  >;

  orders: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        maker: string;
        sourceToken: string;
        destinationToken: string;
        sourceAmount: bigint;
        startPrice: bigint;
        endPrice: bigint;
        startTime: bigint;
        duration: bigint;
        decayFactor: bigint;
        intentHash: string;
        executed: boolean;
        refunded: boolean;
        sourceChainId: bigint;
        destChainId: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  refundOrder: TypedContractMethod<[orderId: BytesLike], [void], "nonpayable">;

  removeResolver: TypedContractMethod<
    [resolver: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userOrders: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_DECAY_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addResolver"
  ): TypedContractMethod<[resolver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedResolvers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createIntentOrder"
  ): TypedContractMethod<
    [
      sourceToken: AddressLike,
      destinationToken: AddressLike,
      sourceAmount: BigNumberish,
      startPrice: BigNumberish,
      endPrice: BigNumberish,
      duration: BigNumberish,
      intentHash: BytesLike,
      destChainId: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillOrder"
  ): TypedContractMethod<
    [orderId: BytesLike, fillAmount: BigNumberish, proofHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fills"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, string] & {
        resolver: string;
        fillAmount: bigint;
        fillPrice: bigint;
        timestamp: bigint;
        proofHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[orderId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOrder"
  ): TypedContractMethod<
    [orderId: BytesLike],
    [DutchAuctionEscrow.IntentOrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrderFills"
  ): TypedContractMethod<
    [orderId: BytesLike],
    [DutchAuctionEscrow.ResolverFillStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserOrders"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "hasOnChainEvidence"
  ): TypedContractMethod<[orderId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        maker: string;
        sourceToken: string;
        destinationToken: string;
        sourceAmount: bigint;
        startPrice: bigint;
        endPrice: bigint;
        startTime: bigint;
        duration: bigint;
        decayFactor: bigint;
        intentHash: string;
        executed: boolean;
        refunded: boolean;
        sourceChainId: bigint;
        destChainId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "refundOrder"
  ): TypedContractMethod<[orderId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeResolver"
  ): TypedContractMethod<[resolver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userOrders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "IntentCreated"
  ): TypedContractEvent<
    IntentCreatedEvent.InputTuple,
    IntentCreatedEvent.OutputTuple,
    IntentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OrderFilled"
  ): TypedContractEvent<
    OrderFilledEvent.InputTuple,
    OrderFilledEvent.OutputTuple,
    OrderFilledEvent.OutputObject
  >;
  getEvent(
    key: "OrderRefunded"
  ): TypedContractEvent<
    OrderRefundedEvent.InputTuple,
    OrderRefundedEvent.OutputTuple,
    OrderRefundedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "IntentCreated(bytes32,address,address,address,uint256,uint256,uint256,uint256,bytes32)": TypedContractEvent<
      IntentCreatedEvent.InputTuple,
      IntentCreatedEvent.OutputTuple,
      IntentCreatedEvent.OutputObject
    >;
    IntentCreated: TypedContractEvent<
      IntentCreatedEvent.InputTuple,
      IntentCreatedEvent.OutputTuple,
      IntentCreatedEvent.OutputObject
    >;

    "OrderFilled(bytes32,address,uint256,uint256,bytes32)": TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
    OrderFilled: TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;

    "OrderRefunded(bytes32,address,uint256)": TypedContractEvent<
      OrderRefundedEvent.InputTuple,
      OrderRefundedEvent.OutputTuple,
      OrderRefundedEvent.OutputObject
    >;
    OrderRefunded: TypedContractEvent<
      OrderRefundedEvent.InputTuple,
      OrderRefundedEvent.OutputTuple,
      OrderRefundedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
