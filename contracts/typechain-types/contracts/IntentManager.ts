/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IntentManager {
  export type IntentStruct = {
    id: BytesLike;
    user: AddressLike;
    description: string;
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amountIn: BigNumberish;
    minAmountOut: BigNumberish;
    timestamp: BigNumberish;
    status: BigNumberish;
    escrowId: BytesLike;
  };

  export type IntentStructOutput = [
    id: string,
    user: string,
    description: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    minAmountOut: bigint,
    timestamp: bigint,
    status: bigint,
    escrowId: string
  ] & {
    id: string;
    user: string;
    description: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    minAmountOut: bigint;
    timestamp: bigint;
    status: bigint;
    escrowId: string;
  };
}

export interface IntentManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createIntent"
      | "escrow"
      | "failIntent"
      | "fulfillIntent"
      | "getIntent"
      | "getUserIntents"
      | "intents"
      | "lockIntent"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "userIntents"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "IntentCreated"
      | "IntentFailed"
      | "IntentFulfilled"
      | "IntentLocked"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createIntent",
    values: [string, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "escrow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "failIntent",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillIntent",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserIntents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "intents", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "lockIntent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userIntents",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "failIntent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIntent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserIntents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "intents", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockIntent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userIntents",
    data: BytesLike
  ): Result;
}

export namespace IntentCreatedEvent {
  export type InputTuple = [
    intentId: BytesLike,
    user: AddressLike,
    description: string,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish
  ];
  export type OutputTuple = [
    intentId: string,
    user: string,
    description: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint
  ];
  export interface OutputObject {
    intentId: string;
    user: string;
    description: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntentFailedEvent {
  export type InputTuple = [intentId: BytesLike, reason: string];
  export type OutputTuple = [intentId: string, reason: string];
  export interface OutputObject {
    intentId: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntentFulfilledEvent {
  export type InputTuple = [intentId: BytesLike, amountOut: BigNumberish];
  export type OutputTuple = [intentId: string, amountOut: bigint];
  export interface OutputObject {
    intentId: string;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntentLockedEvent {
  export type InputTuple = [intentId: BytesLike, escrowId: BytesLike];
  export type OutputTuple = [intentId: string, escrowId: string];
  export interface OutputObject {
    intentId: string;
    escrowId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IntentManager extends BaseContract {
  connect(runner?: ContractRunner | null): IntentManager;
  waitForDeployment(): Promise<this>;

  interface: IntentManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createIntent: TypedContractMethod<
    [
      description: string,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  escrow: TypedContractMethod<[], [string], "view">;

  failIntent: TypedContractMethod<
    [intentId: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;

  fulfillIntent: TypedContractMethod<
    [intentId: BytesLike, amountOut: BigNumberish],
    [void],
    "nonpayable"
  >;

  getIntent: TypedContractMethod<
    [intentId: BytesLike],
    [IntentManager.IntentStructOutput],
    "view"
  >;

  getUserIntents: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  intents: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        id: string;
        user: string;
        description: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: bigint;
        minAmountOut: bigint;
        timestamp: bigint;
        status: bigint;
        escrowId: string;
      }
    ],
    "view"
  >;

  lockIntent: TypedContractMethod<[intentId: BytesLike], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userIntents: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createIntent"
  ): TypedContractMethod<
    [
      description: string,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "escrow"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "failIntent"
  ): TypedContractMethod<
    [intentId: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fulfillIntent"
  ): TypedContractMethod<
    [intentId: BytesLike, amountOut: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getIntent"
  ): TypedContractMethod<
    [intentId: BytesLike],
    [IntentManager.IntentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserIntents"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "intents"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        id: string;
        user: string;
        description: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: bigint;
        minAmountOut: bigint;
        timestamp: bigint;
        status: bigint;
        escrowId: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockIntent"
  ): TypedContractMethod<[intentId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userIntents"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "IntentCreated"
  ): TypedContractEvent<
    IntentCreatedEvent.InputTuple,
    IntentCreatedEvent.OutputTuple,
    IntentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "IntentFailed"
  ): TypedContractEvent<
    IntentFailedEvent.InputTuple,
    IntentFailedEvent.OutputTuple,
    IntentFailedEvent.OutputObject
  >;
  getEvent(
    key: "IntentFulfilled"
  ): TypedContractEvent<
    IntentFulfilledEvent.InputTuple,
    IntentFulfilledEvent.OutputTuple,
    IntentFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "IntentLocked"
  ): TypedContractEvent<
    IntentLockedEvent.InputTuple,
    IntentLockedEvent.OutputTuple,
    IntentLockedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "IntentCreated(bytes32,address,string,address,address,uint256)": TypedContractEvent<
      IntentCreatedEvent.InputTuple,
      IntentCreatedEvent.OutputTuple,
      IntentCreatedEvent.OutputObject
    >;
    IntentCreated: TypedContractEvent<
      IntentCreatedEvent.InputTuple,
      IntentCreatedEvent.OutputTuple,
      IntentCreatedEvent.OutputObject
    >;

    "IntentFailed(bytes32,string)": TypedContractEvent<
      IntentFailedEvent.InputTuple,
      IntentFailedEvent.OutputTuple,
      IntentFailedEvent.OutputObject
    >;
    IntentFailed: TypedContractEvent<
      IntentFailedEvent.InputTuple,
      IntentFailedEvent.OutputTuple,
      IntentFailedEvent.OutputObject
    >;

    "IntentFulfilled(bytes32,uint256)": TypedContractEvent<
      IntentFulfilledEvent.InputTuple,
      IntentFulfilledEvent.OutputTuple,
      IntentFulfilledEvent.OutputObject
    >;
    IntentFulfilled: TypedContractEvent<
      IntentFulfilledEvent.InputTuple,
      IntentFulfilledEvent.OutputTuple,
      IntentFulfilledEvent.OutputObject
    >;

    "IntentLocked(bytes32,bytes32)": TypedContractEvent<
      IntentLockedEvent.InputTuple,
      IntentLockedEvent.OutputTuple,
      IntentLockedEvent.OutputObject
    >;
    IntentLocked: TypedContractEvent<
      IntentLockedEvent.InputTuple,
      IntentLockedEvent.OutputTuple,
      IntentLockedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
